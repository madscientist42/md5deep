PROJECT(hashdeep)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# Set a few global project definitions...
SET(VERSION "4.4")
SET(PACKAGE_NAME "hashdeep")
SET(PACKAGE_STRING "hashdeep-4.4")
SET(PACKAGE_VERSION "4.4")
SET(PACKAGE_BUGREPORT "Frank C. Earl (linusti@gmail.com)")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -D_FILE_OFFSET_BITS=64")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread -D_FILE_OFFSET_BITS=64")

# Macro includes...
INCLUDE (CheckIncludeFiles)
INCLUDE (CheckPrototypeDefinition)
INCLUDE (CheckSymbolExists)
INCLUDE (CheckLibraryExists)
INCLUDE (CheckTypeSize)

# Handle some of the platform detection code that Autotools was
# doing for us...
CHECK_INCLUDE_FILE(CommonCrypto/CommonDigest.h HAVE_COMMONCRYPTO_COMMONDIGEST_H)
CHECK_INCLUDE_FILE(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(libgen.h HAVE_LIBGEN_H)
CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)
CHECK_INCLUDE_FILE(pwd.h HAVE_PWD_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)

CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
IF (HAVE_STDLIB_H)
    CHECK_SYMBOL_EXISTS(getprogname stdlib.h HAVE_GETPROGNAME)
    CHECK_SYMBOL_EXISTS(mkstemp stdlib.h HAVE_MKSTEMP)
ENDIF (HAVE_STDLIB_H)

CHECK_INCLUDE_FILE(stdio.h HAVE_STDIO_H)
IF (HAVE_STDIO_H)
    CHECK_SYMBOL_EXISTS(fseeko stdio.h HAVE_FSEEKO)
    CHECK_SYMBOL_EXISTS(fseeko64 stdio.h HAVE_FSEEKO_64)
    CHECK_SYMBOL_EXISTS(ftello64 stdio.h HAVE_FTELLO_64)
    CHECK_SYMBOL_EXISTS(vprintf stdio.h HAVE_VPRINTF)
    IF(NOT HAVE_VPRINTF)
        CHECK_SYMBOL_EXISTS(_doprnt stdio.h HAVE_DOPRNT)
    ENDIF(NOT HAVE_VPRINTF)
    CHECK_SYMBOL_EXISTS(vasprintf stdio.h HAVE_VASPRINTF)
    IF(NOT HAVE_VASPRINTF)
        CHECK_SYMBOL_EXISTS(vasprintf stdio2.h HAVE_VASPRINTF)
    ENDIF(NOT HAVE_VASPRINTF)
ENDIF (HAVE_STDIO_H)

CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(sys/cdefs.h HAVE_SYS_CDEFS_H)
CHECK_INCLUDE_FILE(sys/disk.h HAVE_SYS_DISK_H)
CHECK_INCLUDE_FILE(sys/ioctl.h HAVE_SYS_IOCTL_H)

CHECK_INCLUDE_FILE(sys/mman.h HAVE_SYS_MMAN_H)
CHECK_INCLUDE_FILE(sys/mmap.h HAVE_SYS_MMAP_H)
CHECK_SYMBOL_EXISTS(mmap sys/mman.h HAVE_MMAP)
IF(NOT HAVE_MMAP)
    CHECK_SYMBOL_EXISTS(mmap sys/mmap.h HAVE_MMAP)
ENDIF(NOT HAVE_MMAP)

CHECK_INCLUDE_FILE(sys/mount.h HAVE_SYS_MOUNT_H)
CHECK_INCLUDE_FILE(sys/param.h HAVE_SYS_PARAM_H)

CHECK_INCLUDE_FILE(sys/resource.h HAVE_SYS_RESOURCE_H)
IF (HAVE_SYS_RESOURCE_H)
    CHECK_SYMBOL_EXISTS(getrusage sys/resource.h HAVE_GETRUSAGE)
ENDIF (HAVE_SYS_RESOURCE_H)

CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)

CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
IF (HAVE_SYS_TYPES_H)
    CHECK_SYMBOL_EXISTS(off_t sys/types.h OFF_T_DEFINED)
    IF (NOT OFF_T_DEFINED)
        SET(OFF_T_DEFINED "int64_t")
    ENDIF (NOT OFF_T_DEFINED)
    CHECK_SYMBOL_EXISTS(size_t sys/types.h SIZE_T_DEFINED)
    IF (NOT SIZE_T_DEFINED)
        SET(SIZE_T_DEFINED "unsigned int")
    ENDIF (NOT SIZE_T_DEFINED)
ENDIF (HAVE_SYS_TYPES_H)

CHECK_INCLUDE_FILE(sys/utsname.h HAVE_SYS_UTSNAME_H)

CHECK_INCLUDE_FILE(time.h HAVE_TIME_H)
IF (HAVE_TIME_H)
    CHECK_SYMBOL_EXISTS(localtime_r time.h HAVE_LOCALTIME_R)
    CHECK_SYMBOL_EXISTS(gmtime_r time.h HAVE_GMTIME_R)
ENDIF (HAVE_TIME_H)

CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
IF(HAVE_UNISTD_H)
    CHECK_SYMBOL_EXISTS(gethostname unistd.h HAVE_GETHOSTNAME)
    CHECK_SYMBOL_EXISTS(getuid unistd.h HAVE_GETUID)
    CHECK_SYMBOL_EXISTS(usleep unistd.h HAVE_USLEEP)
    CHECK_SYMBOL_EXISTS(isxdigit ctype.h HAVE_ISXDIGIT)
ENDIF(HAVE_UNISTD_H)

CHECK_INCLUDE_FILE(dirent.h HAVE_DIRENT_H)
IF (HAVE_DIRENT_H)
    UNSET(HAVE_DIRENT_H)
    CHECK_SYMBOL_EXISTS(DIR dirent.h HAVE_DIRENT_H)
    IF (NOT HAVE_DIRENT_H)
        MESSAGE(STATUS "--- DIR not defined...")
    ELSE (NOT HAVE_DIRENT_H)
        CHECK_PROTOTYPE_DEFINITION(closedir "void closedir(DIR *dirp)" "NULL" "dirent.h" CLOSEDIR_VOID)
    ENDIF (NOT HAVE_DIRENT_H)
ENDIF (HAVE_DIRENT_H)

CHECK_INCLUDE_FILE(ndir.h HAVE_NDIR_H)
IF (HAVE_NDIR_H)
    UNSET(HAVE_NDIR_H)
    CHECK_SYMBOL_EXISTS(DIR ndir.h HAVE_NDIR_H)
    IF (NOT HAVE_NDIR_H)
        MESSAGE(STATUS "--- DIR not defined...")
    ENDIF (NOT HAVE_NDIR_H)
ENDIF (HAVE_NDIR_H)

CHECK_INCLUDE_FILE(sys/dir.h HAVE_SYS_DIR_H)
IF (HAVE_SYS_DIR_H)
    UNSET(HAVE_SYS_DIR_H)
    CHECK_SYMBOL_EXISTS(DIR ndir.h HAVE_SYS_DIR_H)
    IF (NOT HAVE_SYS_DIR_H)
        MESSAGE(STATUS "--- DIR not defined...")
    ENDIF (NOT HAVE_SYS_DIR_H)
ENDIF (HAVE_SYS_DIR_H)

CHECK_INCLUDE_FILE(sys/ndir.h HAVE_SYS_NDIR_H)
IF (HAVE_SYS_NDIR_H)
    UNSET(HAVE_SYS_NDIR_H)
    CHECK_SYMBOL_EXISTS(DIR ndir.h HAVE_SYS_NDIR_H)
    IF (NOT HAVE_SYS_NDIR_H)
        MESSAGE(STATUS "--- DIR not defined...")
    ENDIF (NOT HAVE_SYS_NDIR_H)
ENDIF (HAVE_SYS_NDIR_H)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    # Linux specific code trigger
    SET(__LINUX__ "1")
    # FIXME - Need to probably have the PTHREAD detection code in here...
    SET(HAVE_PTHREAD "1")
    SET(STDC_HEADERS "1")
    SET(TIME_WITH_SYS_TIME "1")
    SET(_GNU_SOURCE "1")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    # Windows specific code trigger
    IF (MINGW)
        # Mingw...  Set the specific compile options for this...
        SET(HAVE_PTHREAD "1")
        SET(HAVE_STRUCT_TIMESPEC "1")
    ENDIF(MINGW)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/config.h.cmake" "${PROJECT_BINARY_DIR}/src/config.h")

# Now finally specify the program build itself- the CMakeLists.txt resides in src/
ADD_SUBDIRECTORY(src)
